// Original Schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  questions     Question[]  // New relation to questions in the forum
  replies       Reply[]     // New relation to replies in the forum
  votes         Vote[]      // New relation to votes in the forum
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Forum Schema (new)

model Question {
  id         String   @id @default(cuid())
  title      String
  content    String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  replies    Reply[]  // Relation to replies in the forum
  tags       Tag[]    // Relation to tags
  votes      Vote[]   // Relation to votes
  views      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Reply {
  id         String   @id @default(cuid())
  content    String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  votes      Vote[]   // Relation to votes for the reply
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  questions Question[] // Relation to questions in the forum
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Vote {
  id         String    @id @default(cuid())
  value      Int       @default(0) // 1 for upvote, -1 for downvote
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  reply      Reply?    @relation(fields: [replyId], references: [id])
  replyId    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([userId, questionId])
  @@unique([userId, replyId])
}

